// call fn `times` times, and measure how long it takes
// returns an array [seconds, nanoseconds]
function perf(times, fn) {
  if (fn === undefined && typeof times === 'function') {
    fn = times; times = 1000;
  }
  var start = process.hrtime();
  for(var i=0; i<times; i++) {
    fn();
  }
  return process.hrtime(start);
}

// return a function that calls fn, passing o as a parameter
function pass(o, fn) {
  return function() { fn(o) }
}

/*
 *  params:
 *   - a number of times to run each function
 *   - a set of functions in the form { 'some description': func, ... }
 *   - a parameter to pass to each function
 *
 * returns an object with the same keys as the set of functions, where the values
 * are the timing data returned from perf()
 */
function cmp(times, fns, params) {
  // times is optional; defaults to 1000
  if (params === undefined && typeof times !== 'number') {
    params = fns;
    fns = times;
    times = 1000;
  }
  var timing = {};
  for (var key in fns) {
    if (!fns.hasOwnProperty(key)) continue;

    timing[key] = perf(times, pass(params, fns[key]));
  }
  return timing;
}

module.exports = cmp;
cmp.pass = pass;
cmp.perf = perf;
